// <auto-generated />
using System;
using CQRS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQRS.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240925203817_Add-DataAccount6")]
    partial class AddDataAccount6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Proxy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Proxy");

                    b.HasIndex("UserType");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec6e9679-d6c8-4846-963b-12a04ddbef66"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8309),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("5ad35617-07ae-4ed2-b7db-5069c969ba64"),
                            UserName = "User1",
                            UserType = new Guid("47acab9c-3983-48b5-8d97-0a5486060f8d")
                        },
                        new
                        {
                            Id = new Guid("0d86f0c6-3778-41ad-bec8-059ea247f76d"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8320),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("5ad35617-07ae-4ed2-b7db-5069c969ba64"),
                            UserName = "User2",
                            UserType = new Guid("ec6637d2-3251-48b1-859c-3c165ad14564")
                        },
                        new
                        {
                            Id = new Guid("a57f53fa-01b3-4c3e-b971-2c98f32f27ef"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8322),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            UserName = "User3",
                            UserType = new Guid("ec6637d2-3251-48b1-859c-3c165ad14564")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47acab9c-3983-48b5-8d97-0a5486060f8d"),
                            IsDelete = false,
                            TypeName = 0
                        },
                        new
                        {
                            Id = new Guid("ec6637d2-3251-48b1-859c-3c165ad14564"),
                            IsDelete = false,
                            TypeName = 1
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowser", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrowserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "BrowserId");

                    b.HasIndex("BrowserId");

                    b.ToTable("AccountsInBrowser");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("ec6e9679-d6c8-4846-963b-12a04ddbef66"),
                            BrowserId = new Guid("7bc6d9a0-4133-4e41-bb55-4889cda0963b"),
                            IsDelete = false
                        },
                        new
                        {
                            AccountId = new Guid("0d86f0c6-3778-41ad-bec8-059ea247f76d"),
                            BrowserId = new Guid("00685fc1-ee62-48d1-b3de-c4d656c28f56"),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProject", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AccountsInProject");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("ec6e9679-d6c8-4846-963b-12a04ddbef66"),
                            ProjectId = new Guid("08552e0b-bfc4-4549-ade5-47080c53436d"),
                            IsDelete = false
                        },
                        new
                        {
                            AccountId = new Guid("0d86f0c6-3778-41ad-bec8-059ea247f76d"),
                            ProjectId = new Guid("237cb61a-3a63-4191-b30f-cbdc45d55b29"),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Browser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Browser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bc6d9a0-4133-4e41-bb55-4889cda0963b"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8378),
                            IsDelete = false,
                            IsStatus = false,
                            Name = "Name1",
                            Path = "Path"
                        },
                        new
                        {
                            Id = new Guid("00685fc1-ee62-48d1-b3de-c4d656c28f56"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8380),
                            IsDelete = false,
                            IsStatus = false,
                            Name = "Name2",
                            Path = "Path"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Logs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59c3af7a-1832-47ba-a9b1-7e49ce1ac3ed"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8353),
                            IsDelete = false,
                            Message = "Message",
                            User = new Guid("ec6e9679-d6c8-4846-963b-12a04ddbef66")
                        },
                        new
                        {
                            Id = new Guid("1b91a64e-cefc-4007-a2e5-cf75ace2fd5f"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8355),
                            IsDelete = false,
                            Message = "Message",
                            User = new Guid("0d86f0c6-3778-41ad-bec8-059ea247f76d")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08552e0b-bfc4-4549-ade5-47080c53436d"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8429),
                            EndDate = new DateTime(2024, 10, 1, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8424),
                            IsDelete = false,
                            Name = "Project1",
                            StartDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8423)
                        },
                        new
                        {
                            Id = new Guid("237cb61a-3a63-4191-b30f-cbdc45d55b29"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8432),
                            EndDate = new DateTime(2024, 10, 1, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8432),
                            IsDelete = false,
                            Name = "Project2",
                            StartDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8431)
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Proxy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proxy");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ad35617-07ae-4ed2-b7db-5069c969ba64"),
                            Ip = "192.168.1.1",
                            IsDelete = false,
                            Password = "proxyPass1",
                            Port = 8080,
                            User = "proxyUser1"
                        },
                        new
                        {
                            Id = new Guid("d9b50a6e-cf9e-488d-b015-f02f7bbcc6f6"),
                            Ip = "192.168.1.2",
                            IsDelete = false,
                            Password = "proxyPass2",
                            Port = 8080,
                            User = "proxyUser2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Script", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Script");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6207b114-be2d-40f3-86e2-91c3425ce058"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8516),
                            IsDelete = false,
                            Name = "Script 1"
                        },
                        new
                        {
                            Id = new Guid("83f49bae-dc7d-44ff-95b4-7cd8dcec719b"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 38, 17, 289, DateTimeKind.Local).AddTicks(8517),
                            IsDelete = false,
                            Name = "Script 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProject", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "ScriptId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptsInProject");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("08552e0b-bfc4-4549-ade5-47080c53436d"),
                            ScriptId = new Guid("6207b114-be2d-40f3-86e2-91c3425ce058"),
                            IsDelete = false
                        },
                        new
                        {
                            ProjectId = new Guid("237cb61a-3a63-4191-b30f-cbdc45d55b29"),
                            ScriptId = new Guid("83f49bae-dc7d-44ff-95b4-7cd8dcec719b"),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Proxy", "Account_Proxy")
                        .WithMany("Logs_Account")
                        .HasForeignKey("Proxy");

                    b.HasOne("CQRS.Domain.Entities.AccountType", "AccountType")
                        .WithMany("AccountType_Accounts")
                        .HasForeignKey("UserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Account_Proxy");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowser", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Account", "AccountsInBrowser_Account")
                        .WithMany("Account_AccountsInBrowser")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.Browser", "AccountsInBrowser_Browser")
                        .WithMany("Browser_AccountsInBrowser")
                        .HasForeignKey("BrowserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInBrowser_Account");

                    b.Navigation("AccountsInBrowser_Browser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProject", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Account", "AccountsInProject_Account")
                        .WithMany("Account_AccountsInProject")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.Project", "AccountsInProject_Project")
                        .WithMany("AccountsInProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInProject_Account");

                    b.Navigation("AccountsInProject_Project");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Logs", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Account", "Logs_Account")
                        .WithMany("Logs")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProject", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Project", "ScriptsInProject_Project")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.Script", "ScriptsInProject_Script")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScriptsInProject_Project");

                    b.Navigation("ScriptsInProject_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.Navigation("Account_AccountsInBrowser");

                    b.Navigation("Account_AccountsInProject");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountType", b =>
                {
                    b.Navigation("AccountType_Accounts");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Browser", b =>
                {
                    b.Navigation("Browser_AccountsInBrowser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Project", b =>
                {
                    b.Navigation("AccountsInProject");

                    b.Navigation("ScriptsInProjects");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Proxy", b =>
                {
                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Script", b =>
                {
                    b.Navigation("ScriptsInProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
