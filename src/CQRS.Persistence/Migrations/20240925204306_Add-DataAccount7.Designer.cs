// <auto-generated />
using System;
using CQRS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQRS.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240925204306_Add-DataAccount7")]
    partial class AddDataAccount7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Proxy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Proxy");

                    b.HasIndex("UserType");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c37213-43ab-49d0-8a50-b00ac36fc628"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(345),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("63445160-0ae1-434b-8fdb-f3dc3f260742"),
                            UserName = "User1",
                            UserType = new Guid("7638800c-d4a3-49b4-8003-61c0c60f2270")
                        },
                        new
                        {
                            Id = new Guid("871845eb-fecc-4ccf-acf2-1b4968f39288"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(356),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("63445160-0ae1-434b-8fdb-f3dc3f260742"),
                            UserName = "User2",
                            UserType = new Guid("aabb23a1-921d-4b5a-b902-9f50190fee10")
                        },
                        new
                        {
                            Id = new Guid("481ca6ae-7bf0-463a-880b-ae034ba1370c"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(357),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            UserName = "User3",
                            UserType = new Guid("aabb23a1-921d-4b5a-b902-9f50190fee10")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7638800c-d4a3-49b4-8003-61c0c60f2270"),
                            IsDelete = false,
                            TypeName = 0
                        },
                        new
                        {
                            Id = new Guid("aabb23a1-921d-4b5a-b902-9f50190fee10"),
                            IsDelete = false,
                            TypeName = 1
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowser", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrowserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "BrowserId");

                    b.HasIndex("BrowserId");

                    b.ToTable("AccountsInBrowser");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("b1c37213-43ab-49d0-8a50-b00ac36fc628"),
                            BrowserId = new Guid("f5913811-3cb2-46a1-9d5d-af0eadad23a6"),
                            IsDelete = false
                        },
                        new
                        {
                            AccountId = new Guid("871845eb-fecc-4ccf-acf2-1b4968f39288"),
                            BrowserId = new Guid("4de10ec1-25bf-4b48-9a90-5ba7a581fd9f"),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProject", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AccountsInProject");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("b1c37213-43ab-49d0-8a50-b00ac36fc628"),
                            ProjectId = new Guid("ca098303-b8fa-4e4e-9fc7-92145364ed81"),
                            IsDelete = false
                        },
                        new
                        {
                            AccountId = new Guid("871845eb-fecc-4ccf-acf2-1b4968f39288"),
                            ProjectId = new Guid("3d2d800c-fcb4-4da5-a138-1499437a75a0"),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Browser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Browser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5913811-3cb2-46a1-9d5d-af0eadad23a6"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(409),
                            IsDelete = false,
                            IsStatus = false,
                            Name = "Name1",
                            Path = "Path"
                        },
                        new
                        {
                            Id = new Guid("4de10ec1-25bf-4b48-9a90-5ba7a581fd9f"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(411),
                            IsDelete = false,
                            IsStatus = false,
                            Name = "Name2",
                            Path = "Path"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Logs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a50aa70-b298-4a64-9069-a93e18251442"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(383),
                            IsDelete = false,
                            Message = "Message",
                            User = new Guid("b1c37213-43ab-49d0-8a50-b00ac36fc628")
                        },
                        new
                        {
                            Id = new Guid("8ec533bb-1300-4044-ad5d-c2cab914169a"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(385),
                            IsDelete = false,
                            Message = "Message",
                            User = new Guid("871845eb-fecc-4ccf-acf2-1b4968f39288")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plan");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05ad3862-0943-4884-a9a6-5662bf35ffa9"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(578),
                            IsDelete = false,
                            Name = "Plan 1"
                        },
                        new
                        {
                            Id = new Guid("0906bdcd-1a6d-40bc-9e85-69dc3fbfa967"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(579),
                            IsDelete = false,
                            Name = "Plan 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca098303-b8fa-4e4e-9fc7-92145364ed81"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(485),
                            EndDate = new DateTime(2024, 10, 1, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(480),
                            IsDelete = false,
                            Name = "Project1",
                            StartDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(479)
                        },
                        new
                        {
                            Id = new Guid("3d2d800c-fcb4-4da5-a138-1499437a75a0"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(488),
                            EndDate = new DateTime(2024, 10, 1, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(487),
                            IsDelete = false,
                            Name = "Project2",
                            StartDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(486)
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Proxy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proxy");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63445160-0ae1-434b-8fdb-f3dc3f260742"),
                            Ip = "192.168.1.1",
                            IsDelete = false,
                            Password = "proxyPass1",
                            Port = 8080,
                            User = "proxyUser1"
                        },
                        new
                        {
                            Id = new Guid("7cebd2f5-0caf-4283-a3b2-efe8d998ec7a"),
                            Ip = "192.168.1.2",
                            IsDelete = false,
                            Password = "proxyPass2",
                            Port = 8080,
                            User = "proxyUser2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Script", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Script");

                    b.HasData(
                        new
                        {
                            Id = new Guid("615aaeb1-2f8d-41e1-8abe-15b72df8cc45"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(533),
                            IsDelete = false,
                            Name = "Script 1"
                        },
                        new
                        {
                            Id = new Guid("d19acd0c-c197-4de2-ba54-29fcfe63a8ea"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 43, 6, 479, DateTimeKind.Local).AddTicks(534),
                            IsDelete = false,
                            Name = "Script 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("PlanId", "ScriptId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptsInPlan");

                    b.HasData(
                        new
                        {
                            PlanId = new Guid("05ad3862-0943-4884-a9a6-5662bf35ffa9"),
                            ScriptId = new Guid("615aaeb1-2f8d-41e1-8abe-15b72df8cc45"),
                            IsDelete = false
                        },
                        new
                        {
                            PlanId = new Guid("0906bdcd-1a6d-40bc-9e85-69dc3fbfa967"),
                            ScriptId = new Guid("d19acd0c-c197-4de2-ba54-29fcfe63a8ea"),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProject", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "ScriptId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptsInProject");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("ca098303-b8fa-4e4e-9fc7-92145364ed81"),
                            ScriptId = new Guid("615aaeb1-2f8d-41e1-8abe-15b72df8cc45"),
                            IsDelete = false
                        },
                        new
                        {
                            ProjectId = new Guid("3d2d800c-fcb4-4da5-a138-1499437a75a0"),
                            ScriptId = new Guid("d19acd0c-c197-4de2-ba54-29fcfe63a8ea"),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Proxy", "Account_Proxy")
                        .WithMany("Logs_Account")
                        .HasForeignKey("Proxy");

                    b.HasOne("CQRS.Domain.Entities.AccountType", "AccountType")
                        .WithMany("AccountType_Accounts")
                        .HasForeignKey("UserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Account_Proxy");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowser", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Account", "AccountsInBrowser_Account")
                        .WithMany("Account_AccountsInBrowser")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.Browser", "AccountsInBrowser_Browser")
                        .WithMany("Browser_AccountsInBrowser")
                        .HasForeignKey("BrowserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInBrowser_Account");

                    b.Navigation("AccountsInBrowser_Browser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProject", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Account", "AccountsInProject_Account")
                        .WithMany("Account_AccountsInProject")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.Project", "AccountsInProject_Project")
                        .WithMany("AccountsInProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInProject_Account");

                    b.Navigation("AccountsInProject_Project");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Logs", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Account", "Logs_Account")
                        .WithMany("Logs")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlan", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Plan", "ScriptsInPlan_Plan")
                        .WithMany("ScriptsInPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.Script", "ScriptsInPlan_Script")
                        .WithMany()
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScriptsInPlan_Plan");

                    b.Navigation("ScriptsInPlan_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProject", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Project", "ScriptsInProject_Project")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.Script", "ScriptsInProject_Script")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScriptsInProject_Project");

                    b.Navigation("ScriptsInProject_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.Navigation("Account_AccountsInBrowser");

                    b.Navigation("Account_AccountsInProject");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountType", b =>
                {
                    b.Navigation("AccountType_Accounts");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Browser", b =>
                {
                    b.Navigation("Browser_AccountsInBrowser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Plan", b =>
                {
                    b.Navigation("ScriptsInPlans");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Project", b =>
                {
                    b.Navigation("AccountsInProject");

                    b.Navigation("ScriptsInProjects");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Proxy", b =>
                {
                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Script", b =>
                {
                    b.Navigation("ScriptsInProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
