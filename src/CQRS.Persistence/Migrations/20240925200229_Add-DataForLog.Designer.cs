// <auto-generated />
using System;
using CQRS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQRS.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240925200229_Add-DataForLog")]
    partial class AddDataForLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserType");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fa0a7ab-de8c-4840-968a-7c7d17c0de19"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 2, 29, 555, DateTimeKind.Local).AddTicks(1373),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            UserName = "User1",
                            UserType = new Guid("1cd166a8-4bd8-4c24-94f2-ee539b7e8572")
                        },
                        new
                        {
                            Id = new Guid("883ca30d-4b53-4023-8ef9-894be95717a7"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 2, 29, 555, DateTimeKind.Local).AddTicks(1387),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            UserName = "User2",
                            UserType = new Guid("275ba768-e7f1-4dab-9772-1551f5c6ff88")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cd166a8-4bd8-4c24-94f2-ee539b7e8572"),
                            IsDelete = false,
                            TypeName = 0
                        },
                        new
                        {
                            Id = new Guid("275ba768-e7f1-4dab-9772-1551f5c6ff88"),
                            IsDelete = false,
                            TypeName = 1
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Logs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cf6ea4a-f17e-47e0-b913-03fb26be6ff7"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 9, 26, 3, 2, 29, 555, DateTimeKind.Local).AddTicks(1414),
                            IsDelete = false,
                            Message = "Message",
                            User = new Guid("4fa0a7ab-de8c-4840-968a-7c7d17c0de19")
                        },
                        new
                        {
                            Id = new Guid("c6c38870-9e22-4791-8eac-f15b1b9e66de"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 9, 26, 3, 2, 29, 555, DateTimeKind.Local).AddTicks(1415),
                            IsDelete = false,
                            Message = "Message",
                            User = new Guid("883ca30d-4b53-4023-8ef9-894be95717a7")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountType", "AccountType")
                        .WithMany("AccountType_Accounts")
                        .HasForeignKey("UserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Logs", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Account", "Logs_Account")
                        .WithMany("Logs")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountType", b =>
                {
                    b.Navigation("AccountType_Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
