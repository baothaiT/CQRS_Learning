// <auto-generated />
using System;
using CQRS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQRS.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240925202419_Add-DataAccount4")]
    partial class AddDataAccount4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Proxy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Proxy");

                    b.HasIndex("UserType");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e266d80-e354-45b4-a9f9-db5070214c34"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 24, 19, 222, DateTimeKind.Local).AddTicks(87),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("12910082-9a29-4f25-be7a-39fc819f6b90"),
                            UserName = "User1",
                            UserType = new Guid("6f273958-97ca-4e11-a493-23fc9e14d065")
                        },
                        new
                        {
                            Id = new Guid("ce15b268-c1de-4c0f-b76e-cfd56c9149bb"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 24, 19, 222, DateTimeKind.Local).AddTicks(100),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("12910082-9a29-4f25-be7a-39fc819f6b90"),
                            UserName = "User2",
                            UserType = new Guid("acbb179c-5fb3-4682-8fa7-c37704fdd1cc")
                        },
                        new
                        {
                            Id = new Guid("7629e68c-cbec-4730-8b9f-7ade89f286fa"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 24, 19, 222, DateTimeKind.Local).AddTicks(102),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsStatus = true,
                            Password = "UserPass",
                            UserName = "User3",
                            UserType = new Guid("acbb179c-5fb3-4682-8fa7-c37704fdd1cc")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f273958-97ca-4e11-a493-23fc9e14d065"),
                            IsDelete = false,
                            TypeName = 0
                        },
                        new
                        {
                            Id = new Guid("acbb179c-5fb3-4682-8fa7-c37704fdd1cc"),
                            IsDelete = false,
                            TypeName = 1
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowser", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrowserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "BrowserId");

                    b.HasIndex("BrowserId");

                    b.ToTable("AccountsInBrowser");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("2e266d80-e354-45b4-a9f9-db5070214c34"),
                            BrowserId = new Guid("fab261ec-6158-4fb0-a829-26b3cc3246cc"),
                            IsDelete = false
                        },
                        new
                        {
                            AccountId = new Guid("ce15b268-c1de-4c0f-b76e-cfd56c9149bb"),
                            BrowserId = new Guid("67e2da50-3dc6-445d-9c12-c7cdb37b659e"),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Browser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Browser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fab261ec-6158-4fb0-a829-26b3cc3246cc"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 24, 19, 222, DateTimeKind.Local).AddTicks(153),
                            IsDelete = false,
                            IsStatus = false,
                            Name = "Name1",
                            Path = "Path"
                        },
                        new
                        {
                            Id = new Guid("67e2da50-3dc6-445d-9c12-c7cdb37b659e"),
                            CreateDate = new DateTime(2024, 9, 26, 3, 24, 19, 222, DateTimeKind.Local).AddTicks(154),
                            IsDelete = false,
                            IsStatus = false,
                            Name = "Name2",
                            Path = "Path"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Logs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf7c6c2c-67b0-4c73-8804-585e0aeed2e6"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 9, 26, 3, 24, 19, 222, DateTimeKind.Local).AddTicks(131),
                            IsDelete = false,
                            Message = "Message",
                            User = new Guid("2e266d80-e354-45b4-a9f9-db5070214c34")
                        },
                        new
                        {
                            Id = new Guid("2a86d50e-fd82-4346-a5c9-38bca5452111"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 9, 26, 3, 24, 19, 222, DateTimeKind.Local).AddTicks(133),
                            IsDelete = false,
                            Message = "Message",
                            User = new Guid("ce15b268-c1de-4c0f-b76e-cfd56c9149bb")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Proxy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proxy");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12910082-9a29-4f25-be7a-39fc819f6b90"),
                            Ip = "192.168.1.1",
                            IsDelete = false,
                            Password = "proxyPass1",
                            Port = 8080,
                            User = "proxyUser1"
                        },
                        new
                        {
                            Id = new Guid("2715b1e3-f3a0-4c64-b05d-0598b23a9082"),
                            Ip = "192.168.1.2",
                            IsDelete = false,
                            Password = "proxyPass2",
                            Port = 8080,
                            User = "proxyUser2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Proxy", "Account_Proxy")
                        .WithMany("Logs_Account")
                        .HasForeignKey("Proxy");

                    b.HasOne("CQRS.Domain.Entities.AccountType", "AccountType")
                        .WithMany("AccountType_Accounts")
                        .HasForeignKey("UserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Account_Proxy");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowser", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Account", "AccountsInBrowser_Account")
                        .WithMany("Account_AccountsInBrowser")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.Browser", "AccountsInBrowser_Browser")
                        .WithMany("Browser_AccountsInBrowser")
                        .HasForeignKey("BrowserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInBrowser_Account");

                    b.Navigation("AccountsInBrowser_Browser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Logs", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.Account", "Logs_Account")
                        .WithMany("Logs")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Account", b =>
                {
                    b.Navigation("Account_AccountsInBrowser");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountType", b =>
                {
                    b.Navigation("AccountType_Accounts");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Browser", b =>
                {
                    b.Navigation("Browser_AccountsInBrowser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.Proxy", b =>
                {
                    b.Navigation("Logs_Account");
                });
#pragma warning restore 612, 618
        }
    }
}
