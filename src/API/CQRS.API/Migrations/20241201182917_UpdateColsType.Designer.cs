// <auto-generated />
using System;
using CQRS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQRS.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241201182917_UpdateColsType")]
    partial class UpdateColsType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Proxy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Proxy");

                    b.HasIndex("UserType");

                    b.ToTable("AccountTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("404e91da-f375-47d9-9e55-5e30bfa0b4be"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3687),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("aafbb842-9140-418a-84a1-00033ef3ccb1"),
                            UserName = "User1",
                            UserType = new Guid("77c3f7f3-d044-495f-9361-114252aeccec")
                        },
                        new
                        {
                            Id = new Guid("afc1113a-f7ba-4410-8832-0b08e921e0d4"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3692),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("aafbb842-9140-418a-84a1-00033ef3ccb1"),
                            UserName = "User2",
                            UserType = new Guid("d634feec-38a9-405c-9c7a-f16c79189354")
                        },
                        new
                        {
                            Id = new Guid("a3ae1460-67bd-4282-895b-0e93749fbae0"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3695),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            UserName = "User3",
                            UserType = new Guid("d634feec-38a9-405c-9c7a-f16c79189354")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountTypeTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77c3f7f3-d044-495f-9361-114252aeccec"),
                            IsDelete = false,
                            IsMigration = true,
                            TypeName = 0
                        },
                        new
                        {
                            Id = new Guid("d634feec-38a9-405c-9c7a-f16c79189354"),
                            IsDelete = false,
                            IsMigration = true,
                            TypeName = 1
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowserEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrowserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "BrowserId");

                    b.HasIndex("BrowserId");

                    b.ToTable("AccountsInBrowserTable");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("404e91da-f375-47d9-9e55-5e30bfa0b4be"),
                            BrowserId = new Guid("beaa2bf5-9277-4a10-b376-916ee83e09be"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            AccountId = new Guid("afc1113a-f7ba-4410-8832-0b08e921e0d4"),
                            BrowserId = new Guid("62a20988-6d2f-43be-a842-a0465ca31335"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProjectEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AccountsInProjectTable");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("404e91da-f375-47d9-9e55-5e30bfa0b4be"),
                            ProjectId = new Guid("85d9ee9a-1a5a-4fa7-b87c-3ada26ad2393"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            AccountId = new Guid("afc1113a-f7ba-4410-8832-0b08e921e0d4"),
                            ProjectId = new Guid("fcd20c13-3815-4d3a-a076-3ebc870c21ee"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.BrowserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("HightScreen")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Scale")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WithScreeen")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("XPosition")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("YPosition")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("BrowserTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("beaa2bf5-9277-4a10-b376-916ee83e09be"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3754),
                            HightScreen = 600m,
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = false,
                            Name = "Name1",
                            Path = "Path",
                            Scale = 50m,
                            UserAgent = "",
                            WithScreeen = 400m,
                            XPosition = 160m,
                            YPosition = 50m
                        },
                        new
                        {
                            Id = new Guid("62a20988-6d2f-43be-a842-a0465ca31335"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3762),
                            HightScreen = 600m,
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = false,
                            Name = "Name2",
                            Path = "Path",
                            Scale = 50m,
                            UserAgent = "",
                            WithScreeen = 400m,
                            XPosition = 160m,
                            YPosition = 50m
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.DevicesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DevicesTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("266de0a4-1c09-400a-943b-e6bbc8319115"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3988),
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("f7b98922-b11b-4a18-8ced-a84621970190"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3990),
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Name = "Name1"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.HistoryOrderTradingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<string>("FillAndOrderPrice_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FillAndOrderPrice_Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndOrderValue_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Prefix_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Prefix_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Suffix_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Suffix_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsResovlve")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol_Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HistoryOrderTradingTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb153ba7-28c4-436b-9c98-7be936e3884a"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = 0,
                            OrderTime = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(4040),
                            Side = "BUY",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        },
                        new
                        {
                            Id = new Guid("5b840cfa-98fe-42a3-806d-87ff7f2e7e2c"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = 0,
                            OrderTime = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(4044),
                            Side = "SELL",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        },
                        new
                        {
                            Id = new Guid("33669ec9-5596-4395-b311-d7280a3101c1"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = 0,
                            OrderTime = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(4047),
                            Side = "SELL",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.LogsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.ToTable("LogsTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc533c9a-5307-45c9-85f3-f8f7f27744b7"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3724),
                            IsDelete = false,
                            IsMigration = true,
                            Message = "Message",
                            User = new Guid("404e91da-f375-47d9-9e55-5e30bfa0b4be")
                        },
                        new
                        {
                            Id = new Guid("8b3ea08d-d7d5-4e79-9892-8c61dc7c7c49"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3728),
                            IsDelete = false,
                            IsMigration = true,
                            Message = "Message",
                            User = new Guid("afc1113a-f7ba-4410-8832-0b08e921e0d4")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed60eba2-5db5-4493-9af9-0e21c49737c4"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3913),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Plan 1"
                        },
                        new
                        {
                            Id = new Guid("1ab4f4bc-7a64-4c17-ac0a-5af60d51d976"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3914),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Plan 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlansInScheduleEntity", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("ScheduleId", "DeviceId", "PlanId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlansInScheduleTable");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("e5ae9307-1b84-4e08-bf3f-9aef1001680c"),
                            DeviceId = new Guid("266de0a4-1c09-400a-943b-e6bbc8319115"),
                            PlanId = new Guid("ed60eba2-5db5-4493-9af9-0e21c49737c4"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            ScheduleId = new Guid("3fad85d1-5751-4987-94a3-0a3bc6b36309"),
                            DeviceId = new Guid("f7b98922-b11b-4a18-8ced-a84621970190"),
                            PlanId = new Guid("1ab4f4bc-7a64-4c17-ac0a-5af60d51d976"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsTable");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProjectTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85d9ee9a-1a5a-4fa7-b87c-3ada26ad2393"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3818),
                            EndDate = new DateTime(2024, 12, 7, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3813),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Project1",
                            StartDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3811)
                        },
                        new
                        {
                            Id = new Guid("fcd20c13-3815-4d3a-a076-3ebc870c21ee"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3821),
                            EndDate = new DateTime(2024, 12, 7, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3820),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Project2",
                            StartDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3820)
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProxyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CheckLiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProxyTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aafbb842-9140-418a-84a1-00033ef3ccb1"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3397),
                            Ip = "192.168.1.6",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass1",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser1"
                        },
                        new
                        {
                            Id = new Guid("4f3d0415-cd4f-4c9b-a95c-db3a3d775308"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3413),
                            Ip = "192.168.1.7",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass2",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser2"
                        },
                        new
                        {
                            Id = new Guid("2b453063-6253-4973-927e-b9ab11a56c9e"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3415),
                            Ip = "192.168.1.8",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass2",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("IsRun")
                        .HasColumnType("int");

                    b.Property<int>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5ae9307-1b84-4e08-bf3f-9aef1001680c"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3961),
                            DateTimeStart = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3961),
                            IsDelete = false,
                            IsMigration = true,
                            IsRun = 0,
                            IsStatus = 0,
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("3fad85d1-5751-4987-94a3-0a3bc6b36309"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3964),
                            DateTimeStart = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3964),
                            IsDelete = false,
                            IsMigration = true,
                            IsRun = 0,
                            IsStatus = 0,
                            Name = "Name1"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScriptTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6592ced5-8e9c-479c-af75-03677111ac5c"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3865),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Script 1"
                        },
                        new
                        {
                            Id = new Guid("c38f56a6-ffc1-4768-820d-ea2b9ddc2ea5"),
                            CreateDate = new DateTime(2024, 12, 2, 1, 29, 14, 536, DateTimeKind.Local).AddTicks(3867),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Script 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlanEntity", b =>
                {
                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ScriptsInPlan_PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScriptsInPlan_ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanId", "ScriptId");

                    b.HasIndex("ScriptsInPlan_PlanId");

                    b.HasIndex("ScriptsInPlan_ScriptId");

                    b.ToTable("ScriptsInPlanTable");

                    b.HasData(
                        new
                        {
                            PlanId = new Guid("ed60eba2-5db5-4493-9af9-0e21c49737c4"),
                            ScriptId = new Guid("6592ced5-8e9c-479c-af75-03677111ac5c"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            PlanId = new Guid("1ab4f4bc-7a64-4c17-ac0a-5af60d51d976"),
                            ScriptId = new Guid("c38f56a6-ffc1-4768-820d-ea2b9ddc2ea5"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProjectEntity", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "ScriptId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptsInProjectTable");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("85d9ee9a-1a5a-4fa7-b87c-3ada26ad2393"),
                            ScriptId = new Guid("6592ced5-8e9c-479c-af75-03677111ac5c"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            ProjectId = new Guid("fcd20c13-3815-4d3a-a076-3ebc870c21ee"),
                            ScriptId = new Guid("c38f56a6-ffc1-4768-820d-ea2b9ddc2ea5"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.ProxyEntity", "Account_Proxy")
                        .WithMany("Proxy_Account")
                        .HasForeignKey("Proxy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CQRS.Domain.Entities.AccountTypeEntity", "AccountType")
                        .WithMany("AccountType_Accounts")
                        .HasForeignKey("UserType");

                    b.Navigation("AccountType");

                    b.Navigation("Account_Proxy");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowserEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "AccountsInBrowser_Account")
                        .WithMany("Account_AccountsInBrowser")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.BrowserEntity", "AccountsInBrowser_Browser")
                        .WithMany("Browser_AccountsInBrowser")
                        .HasForeignKey("BrowserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInBrowser_Account");

                    b.Navigation("AccountsInBrowser_Browser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProjectEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "AccountsInProject_Account")
                        .WithMany("Account_AccountsInProject")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ProjectEntity", "AccountsInProject_Project")
                        .WithMany("AccountsInProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInProject_Account");

                    b.Navigation("AccountsInProject_Project");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.LogsEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "Logs_Account")
                        .WithMany("Logs")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlansInScheduleEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.DevicesEntity", "PlansInSchedule_Device")
                        .WithMany("PlansInSchedules")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.PlanEntity", "PlansInSchedule_Plan")
                        .WithMany("PlansInSchedule")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ScheduleEntity", "PlansInSchedule_Schedule")
                        .WithMany("PlansInSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlansInSchedule_Device");

                    b.Navigation("PlansInSchedule_Plan");

                    b.Navigation("PlansInSchedule_Schedule");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlanEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.PlanEntity", "ScriptsInPlan_Plan")
                        .WithMany("ScriptsInPlans")
                        .HasForeignKey("ScriptsInPlan_PlanId");

                    b.HasOne("CQRS.Domain.Entities.ScriptEntity", "ScriptsInPlan_Script")
                        .WithMany()
                        .HasForeignKey("ScriptsInPlan_ScriptId");

                    b.Navigation("ScriptsInPlan_Plan");

                    b.Navigation("ScriptsInPlan_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProjectEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.ProjectEntity", "ScriptsInProject_Project")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ScriptEntity", "ScriptsInProject_Script")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScriptsInProject_Project");

                    b.Navigation("ScriptsInProject_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.Navigation("Account_AccountsInBrowser");

                    b.Navigation("Account_AccountsInProject");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountTypeEntity", b =>
                {
                    b.Navigation("AccountType_Accounts");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.BrowserEntity", b =>
                {
                    b.Navigation("Browser_AccountsInBrowser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.DevicesEntity", b =>
                {
                    b.Navigation("PlansInSchedules");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlanEntity", b =>
                {
                    b.Navigation("PlansInSchedule");

                    b.Navigation("ScriptsInPlans");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProjectEntity", b =>
                {
                    b.Navigation("AccountsInProject");

                    b.Navigation("ScriptsInProjects");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProxyEntity", b =>
                {
                    b.Navigation("Proxy_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Navigation("PlansInSchedules");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptEntity", b =>
                {
                    b.Navigation("ScriptsInProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
