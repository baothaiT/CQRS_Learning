// <auto-generated />
using System;
using CQRS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQRS.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Proxy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Proxy");

                    b.HasIndex("UserType");

                    b.ToTable("AccountTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d4faaa3-e0e6-4a7d-b695-cf8d2d7c5884"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9205),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("cf6cca11-8042-4509-8831-9b7e36c0b9c9"),
                            UserName = "User1",
                            UserType = new Guid("34d85621-81cb-4428-8ca7-c4c1daeb4eea")
                        },
                        new
                        {
                            Id = new Guid("2db96ebc-1324-433b-85fb-cd39ef2b46ed"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9210),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("cf6cca11-8042-4509-8831-9b7e36c0b9c9"),
                            UserName = "User2",
                            UserType = new Guid("c82b2137-f55c-47ea-88f0-1cdc4c463a3f")
                        },
                        new
                        {
                            Id = new Guid("edbee17f-410b-4c48-b268-05348862b719"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9212),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            UserName = "User3",
                            UserType = new Guid("c82b2137-f55c-47ea-88f0-1cdc4c463a3f")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountTypeTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34d85621-81cb-4428-8ca7-c4c1daeb4eea"),
                            IsDelete = false,
                            IsMigration = true,
                            TypeName = 0
                        },
                        new
                        {
                            Id = new Guid("c82b2137-f55c-47ea-88f0-1cdc4c463a3f"),
                            IsDelete = false,
                            IsMigration = true,
                            TypeName = 1
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowserEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrowserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "BrowserId");

                    b.HasIndex("BrowserId");

                    b.ToTable("AccountsInBrowserTable");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("8d4faaa3-e0e6-4a7d-b695-cf8d2d7c5884"),
                            BrowserId = new Guid("d632d62e-e575-419c-9533-c4aad556db97"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            AccountId = new Guid("2db96ebc-1324-433b-85fb-cd39ef2b46ed"),
                            BrowserId = new Guid("e3a3aca2-9aee-4198-a462-e638a30f4ae4"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProjectEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AccountsInProjectTable");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("8d4faaa3-e0e6-4a7d-b695-cf8d2d7c5884"),
                            ProjectId = new Guid("d7bee786-dd7e-40d3-a733-93bbe07a8e9b"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            AccountId = new Guid("2db96ebc-1324-433b-85fb-cd39ef2b46ed"),
                            ProjectId = new Guid("1b68a457-1e2d-4a46-b6e5-abf15df5ab2e"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.BrowserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("HightScreen")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Scale")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WithScreeen")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("XPosition")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("YPosition")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("BrowserTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d632d62e-e575-419c-9533-c4aad556db97"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9282),
                            HightScreen = 600m,
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = false,
                            Name = "Name1",
                            Path = "Path",
                            Scale = 50m,
                            UserAgent = "",
                            WithScreeen = 400m,
                            XPosition = 160m,
                            YPosition = 50m
                        },
                        new
                        {
                            Id = new Guid("e3a3aca2-9aee-4198-a462-e638a30f4ae4"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9290),
                            HightScreen = 600m,
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = false,
                            Name = "Name2",
                            Path = "Path",
                            Scale = 50m,
                            UserAgent = "",
                            WithScreeen = 400m,
                            XPosition = 160m,
                            YPosition = 50m
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.DevicesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DevicesTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d51ccf6f-1434-4e5f-8991-05fcdf28fafd"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9572),
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("d00c20ec-e986-47aa-9fe9-ae04124d76d0"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9574),
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Name = "Name1"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.HistoryOrderTradingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<string>("FillAndOrderPrice_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FillAndOrderPrice_Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndOrderValue_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Prefix_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Prefix_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Suffix_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Suffix_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResovlve")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol_Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HistoryOrderTradingTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d2dd1af-9151-44fc-aeff-d9063f9ab377"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = false,
                            OrderTime = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9633),
                            Side = "BUY",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        },
                        new
                        {
                            Id = new Guid("ca6d42f5-b031-41bd-b50e-ad86ff744128"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = false,
                            OrderTime = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9638),
                            Side = "SELL",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        },
                        new
                        {
                            Id = new Guid("95f6587e-a668-46e6-a220-0a4f141ae403"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = false,
                            OrderTime = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9641),
                            Side = "SELL",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.LogsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.ToTable("LogsTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aca5d584-97f6-4a09-a220-df42c2f0b3be"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9248),
                            IsDelete = false,
                            IsMigration = true,
                            Message = "Message",
                            User = new Guid("8d4faaa3-e0e6-4a7d-b695-cf8d2d7c5884")
                        },
                        new
                        {
                            Id = new Guid("a4abba82-59e0-42b0-9303-bf3d30038c80"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9251),
                            IsDelete = false,
                            IsMigration = true,
                            Message = "Message",
                            User = new Guid("2db96ebc-1324-433b-85fb-cd39ef2b46ed")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("138589fd-4044-4ac7-acbe-42c9166d70c8"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9489),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Plan 1"
                        },
                        new
                        {
                            Id = new Guid("71c8702b-574a-48bd-979d-1861ca0ee784"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9491),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Plan 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlansInScheduleEntity", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("ScheduleId", "DeviceId", "PlanId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlansInScheduleTable");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("b901030c-1f0c-4e40-9f35-d51fd2c9c170"),
                            DeviceId = new Guid("d51ccf6f-1434-4e5f-8991-05fcdf28fafd"),
                            PlanId = new Guid("138589fd-4044-4ac7-acbe-42c9166d70c8"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            ScheduleId = new Guid("b40ebb43-302c-402d-98ff-e71185743391"),
                            DeviceId = new Guid("d00c20ec-e986-47aa-9fe9-ae04124d76d0"),
                            PlanId = new Guid("71c8702b-574a-48bd-979d-1861ca0ee784"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsTable");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProjectTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7bee786-dd7e-40d3-a733-93bbe07a8e9b"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9359),
                            EndDate = new DateTime(2024, 12, 3, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9352),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Project1",
                            StartDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9351)
                        },
                        new
                        {
                            Id = new Guid("1b68a457-1e2d-4a46-b6e5-abf15df5ab2e"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9366),
                            EndDate = new DateTime(2024, 12, 3, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9366),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Project2",
                            StartDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9365)
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProxyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CheckLiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProxyTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf6cca11-8042-4509-8831-9b7e36c0b9c9"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(8881),
                            Ip = "192.168.1.6",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass1",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser1"
                        },
                        new
                        {
                            Id = new Guid("bcf5d0a6-a568-424b-8552-dd835cd5309e"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(8898),
                            Ip = "192.168.1.7",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass2",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser2"
                        },
                        new
                        {
                            Id = new Guid("c242eac5-4e00-4342-ad61-8f45a1ba74b7"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(8900),
                            Ip = "192.168.1.8",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass2",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("IsRun")
                        .HasColumnType("int");

                    b.Property<int>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b901030c-1f0c-4e40-9f35-d51fd2c9c170"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9541),
                            DateTimeStart = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9539),
                            IsDelete = false,
                            IsMigration = true,
                            IsRun = 0,
                            IsStatus = 0,
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("b40ebb43-302c-402d-98ff-e71185743391"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9543),
                            DateTimeStart = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9542),
                            IsDelete = false,
                            IsMigration = true,
                            IsRun = 0,
                            IsStatus = 0,
                            Name = "Name1"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScriptTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("906c1a4c-8289-4745-b00b-d5952d57fe23"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9432),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Script 1"
                        },
                        new
                        {
                            Id = new Guid("04921956-1120-454b-ba62-839daf24dc32"),
                            CreateDate = new DateTime(2024, 11, 28, 0, 19, 12, 591, DateTimeKind.Local).AddTicks(9435),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Script 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlanEntity", b =>
                {
                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ScriptsInPlan_PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScriptsInPlan_ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanId", "ScriptId");

                    b.HasIndex("ScriptsInPlan_PlanId");

                    b.HasIndex("ScriptsInPlan_ScriptId");

                    b.ToTable("ScriptsInPlanTable");

                    b.HasData(
                        new
                        {
                            PlanId = new Guid("138589fd-4044-4ac7-acbe-42c9166d70c8"),
                            ScriptId = new Guid("906c1a4c-8289-4745-b00b-d5952d57fe23"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            PlanId = new Guid("71c8702b-574a-48bd-979d-1861ca0ee784"),
                            ScriptId = new Guid("04921956-1120-454b-ba62-839daf24dc32"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProjectEntity", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "ScriptId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptsInProjectTable");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("d7bee786-dd7e-40d3-a733-93bbe07a8e9b"),
                            ScriptId = new Guid("906c1a4c-8289-4745-b00b-d5952d57fe23"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            ProjectId = new Guid("1b68a457-1e2d-4a46-b6e5-abf15df5ab2e"),
                            ScriptId = new Guid("04921956-1120-454b-ba62-839daf24dc32"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.ProxyEntity", "Account_Proxy")
                        .WithMany("Proxy_Account")
                        .HasForeignKey("Proxy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CQRS.Domain.Entities.AccountTypeEntity", "AccountType")
                        .WithMany("AccountType_Accounts")
                        .HasForeignKey("UserType");

                    b.Navigation("AccountType");

                    b.Navigation("Account_Proxy");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowserEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "AccountsInBrowser_Account")
                        .WithMany("Account_AccountsInBrowser")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.BrowserEntity", "AccountsInBrowser_Browser")
                        .WithMany("Browser_AccountsInBrowser")
                        .HasForeignKey("BrowserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInBrowser_Account");

                    b.Navigation("AccountsInBrowser_Browser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProjectEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "AccountsInProject_Account")
                        .WithMany("Account_AccountsInProject")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ProjectEntity", "AccountsInProject_Project")
                        .WithMany("AccountsInProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInProject_Account");

                    b.Navigation("AccountsInProject_Project");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.LogsEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "Logs_Account")
                        .WithMany("Logs")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlansInScheduleEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.DevicesEntity", "PlansInSchedule_Device")
                        .WithMany("PlansInSchedules")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.PlanEntity", "PlansInSchedule_Plan")
                        .WithMany("PlansInSchedule")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ScheduleEntity", "PlansInSchedule_Schedule")
                        .WithMany("PlansInSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlansInSchedule_Device");

                    b.Navigation("PlansInSchedule_Plan");

                    b.Navigation("PlansInSchedule_Schedule");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlanEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.PlanEntity", "ScriptsInPlan_Plan")
                        .WithMany("ScriptsInPlans")
                        .HasForeignKey("ScriptsInPlan_PlanId");

                    b.HasOne("CQRS.Domain.Entities.ScriptEntity", "ScriptsInPlan_Script")
                        .WithMany()
                        .HasForeignKey("ScriptsInPlan_ScriptId");

                    b.Navigation("ScriptsInPlan_Plan");

                    b.Navigation("ScriptsInPlan_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProjectEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.ProjectEntity", "ScriptsInProject_Project")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ScriptEntity", "ScriptsInProject_Script")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScriptsInProject_Project");

                    b.Navigation("ScriptsInProject_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.Navigation("Account_AccountsInBrowser");

                    b.Navigation("Account_AccountsInProject");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountTypeEntity", b =>
                {
                    b.Navigation("AccountType_Accounts");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.BrowserEntity", b =>
                {
                    b.Navigation("Browser_AccountsInBrowser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.DevicesEntity", b =>
                {
                    b.Navigation("PlansInSchedules");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlanEntity", b =>
                {
                    b.Navigation("PlansInSchedule");

                    b.Navigation("ScriptsInPlans");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProjectEntity", b =>
                {
                    b.Navigation("AccountsInProject");

                    b.Navigation("ScriptsInProjects");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProxyEntity", b =>
                {
                    b.Navigation("Proxy_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Navigation("PlansInSchedules");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptEntity", b =>
                {
                    b.Navigation("ScriptsInProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
