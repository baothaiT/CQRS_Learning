// <auto-generated />
using System;
using CQRS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQRS.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241203174048_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Proxy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Proxy");

                    b.HasIndex("UserType");

                    b.ToTable("AccountTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06f297da-2abc-4c0b-a84b-186ba6df3674"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8266),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("691bf9d1-7812-4e11-b86a-df52b4e01ef8"),
                            UserName = "User1",
                            UserType = new Guid("8398682b-8626-42bc-9819-baa6096c4083")
                        },
                        new
                        {
                            Id = new Guid("e32b0529-3ef6-47bd-838f-c9e81e578342"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8269),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("691bf9d1-7812-4e11-b86a-df52b4e01ef8"),
                            UserName = "User2",
                            UserType = new Guid("5030d0f9-d60f-42cd-87a6-fc634aae082f")
                        },
                        new
                        {
                            Id = new Guid("7712d7bd-96ff-465d-bb19-25a7bd824b1d"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8271),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            UserName = "User3",
                            UserType = new Guid("5030d0f9-d60f-42cd-87a6-fc634aae082f")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountTypeTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8398682b-8626-42bc-9819-baa6096c4083"),
                            IsDelete = false,
                            IsMigration = true,
                            TypeName = 0
                        },
                        new
                        {
                            Id = new Guid("5030d0f9-d60f-42cd-87a6-fc634aae082f"),
                            IsDelete = false,
                            IsMigration = true,
                            TypeName = 1
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowserEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrowserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "BrowserId");

                    b.HasIndex("BrowserId");

                    b.ToTable("AccountsInBrowserTable");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("06f297da-2abc-4c0b-a84b-186ba6df3674"),
                            BrowserId = new Guid("5a73a12b-cb93-4f51-ab7c-de839e3f43f3"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            AccountId = new Guid("e32b0529-3ef6-47bd-838f-c9e81e578342"),
                            BrowserId = new Guid("281b2ace-6db3-4e83-9cee-8456b8157169"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProjectEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AccountsInProjectTable");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("06f297da-2abc-4c0b-a84b-186ba6df3674"),
                            ProjectId = new Guid("63eb1dfa-cd70-40b2-8dbc-b077c841e0b9"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            AccountId = new Guid("e32b0529-3ef6-47bd-838f-c9e81e578342"),
                            ProjectId = new Guid("fa9e8849-c5c0-4b33-95df-aebcaaae3e35"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.BrowserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("HightScreen")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Scale")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WithScreeen")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("XPosition")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("YPosition")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("BrowserTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a73a12b-cb93-4f51-ab7c-de839e3f43f3"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8326),
                            HightScreen = 600m,
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = false,
                            Name = "Name1",
                            Path = "Path",
                            Scale = 50m,
                            UserAgent = "",
                            WithScreeen = 400m,
                            XPosition = 160m,
                            YPosition = 50m
                        },
                        new
                        {
                            Id = new Guid("281b2ace-6db3-4e83-9cee-8456b8157169"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8334),
                            HightScreen = 600m,
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = false,
                            Name = "Name2",
                            Path = "Path",
                            Scale = 50m,
                            UserAgent = "",
                            WithScreeen = 400m,
                            XPosition = 160m,
                            YPosition = 50m
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.DevicesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DevicesTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db35d214-83b9-412a-aa90-3ac156838dd5"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8584),
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("d834ffe6-87fc-4e70-8d5d-1de3cb791f75"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8585),
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Name = "Name1"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.HistoryOrderTradingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<double>("FillAndOrderPrice_Prefix")
                        .HasColumnType("float");

                    b.Property<double>("FillAndOrderPrice_Suffix")
                        .HasColumnType("float");

                    b.Property<string>("FilledAndOrderValue_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Prefix_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Prefix_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Suffix_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Suffix_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsResovlve")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol_Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HistoryOrderTradingTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6b15d2f-559e-4dd0-9374-98565aa99ca9"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = 0.38100000000000001,
                            FillAndOrderPrice_Suffix = 0.38100000000000001,
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = 0,
                            OrderTime = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8637),
                            Side = "BUY",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        },
                        new
                        {
                            Id = new Guid("e7b700da-edbf-41dc-a0bd-736944c4e11e"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = 0.38100000000000001,
                            FillAndOrderPrice_Suffix = 0.38100000000000001,
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = 0,
                            OrderTime = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8642),
                            Side = "SELL",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        },
                        new
                        {
                            Id = new Guid("781fec36-3aec-4051-bde3-dd331498a0f7"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = 0.38100000000000001,
                            FillAndOrderPrice_Suffix = 0.38100000000000001,
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = 0,
                            OrderTime = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8644),
                            Side = "SELL",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.LogsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.ToTable("LogsTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c056ada4-6602-4f4c-9b69-12a64a1bd211"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8297),
                            IsDelete = false,
                            IsMigration = true,
                            Message = "Message",
                            User = new Guid("06f297da-2abc-4c0b-a84b-186ba6df3674")
                        },
                        new
                        {
                            Id = new Guid("483266e9-35cc-413c-b66d-21e33b23a576"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8300),
                            IsDelete = false,
                            IsMigration = true,
                            Message = "Message",
                            User = new Guid("e32b0529-3ef6-47bd-838f-c9e81e578342")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f118c9fc-d6e3-4a04-9f8b-7de8259a0c8f"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8489),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Plan 1"
                        },
                        new
                        {
                            Id = new Guid("765198d3-e070-46d4-bf31-f7479965d6e1"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8492),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Plan 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlansInScheduleEntity", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("ScheduleId", "DeviceId", "PlanId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlansInScheduleTable");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("76fb091b-a281-441e-85d0-2ddfb8bd3cdc"),
                            DeviceId = new Guid("db35d214-83b9-412a-aa90-3ac156838dd5"),
                            PlanId = new Guid("f118c9fc-d6e3-4a04-9f8b-7de8259a0c8f"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            ScheduleId = new Guid("d73c8cf3-e3da-451b-92d0-3c3f00554984"),
                            DeviceId = new Guid("d834ffe6-87fc-4e70-8d5d-1de3cb791f75"),
                            PlanId = new Guid("765198d3-e070-46d4-bf31-f7479965d6e1"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsTable");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProjectTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63eb1dfa-cd70-40b2-8dbc-b077c841e0b9"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8393),
                            EndDate = new DateTime(2024, 12, 9, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8387),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Project1",
                            StartDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8386)
                        },
                        new
                        {
                            Id = new Guid("fa9e8849-c5c0-4b33-95df-aebcaaae3e35"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8396),
                            EndDate = new DateTime(2024, 12, 9, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8395),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Project2",
                            StartDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8395)
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProxyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CheckLiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProxyTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("691bf9d1-7812-4e11-b86a-df52b4e01ef8"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(7973),
                            Ip = "192.168.1.6",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass1",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser1"
                        },
                        new
                        {
                            Id = new Guid("fc176167-9291-447d-8b68-4c5faea2096c"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(7989),
                            Ip = "192.168.1.7",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass2",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser2"
                        },
                        new
                        {
                            Id = new Guid("474b1972-b192-41a8-a429-090633c6bd53"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(7991),
                            Ip = "192.168.1.8",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass2",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("IsRun")
                        .HasColumnType("int");

                    b.Property<int>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76fb091b-a281-441e-85d0-2ddfb8bd3cdc"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8559),
                            DateTimeStart = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8558),
                            IsDelete = false,
                            IsMigration = true,
                            IsRun = 0,
                            IsStatus = 0,
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("d73c8cf3-e3da-451b-92d0-3c3f00554984"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8562),
                            DateTimeStart = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8561),
                            IsDelete = false,
                            IsMigration = true,
                            IsRun = 0,
                            IsStatus = 0,
                            Name = "Name1"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScriptTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("321f0b02-5829-4cb9-a0ac-e8a9cb8b0414"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8443),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Script 1"
                        },
                        new
                        {
                            Id = new Guid("3a81f0ad-1a55-466d-bef9-a6e1df44ac5c"),
                            CreateDate = new DateTime(2024, 12, 4, 0, 40, 45, 488, DateTimeKind.Local).AddTicks(8444),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Script 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlanEntity", b =>
                {
                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ScriptsInPlan_PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScriptsInPlan_ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanId", "ScriptId");

                    b.HasIndex("ScriptsInPlan_PlanId");

                    b.HasIndex("ScriptsInPlan_ScriptId");

                    b.ToTable("ScriptsInPlanTable");

                    b.HasData(
                        new
                        {
                            PlanId = new Guid("f118c9fc-d6e3-4a04-9f8b-7de8259a0c8f"),
                            ScriptId = new Guid("321f0b02-5829-4cb9-a0ac-e8a9cb8b0414"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            PlanId = new Guid("765198d3-e070-46d4-bf31-f7479965d6e1"),
                            ScriptId = new Guid("3a81f0ad-1a55-466d-bef9-a6e1df44ac5c"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProjectEntity", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "ScriptId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptsInProjectTable");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("63eb1dfa-cd70-40b2-8dbc-b077c841e0b9"),
                            ScriptId = new Guid("321f0b02-5829-4cb9-a0ac-e8a9cb8b0414"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            ProjectId = new Guid("fa9e8849-c5c0-4b33-95df-aebcaaae3e35"),
                            ScriptId = new Guid("3a81f0ad-1a55-466d-bef9-a6e1df44ac5c"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.ProxyEntity", "Account_Proxy")
                        .WithMany("Proxy_Account")
                        .HasForeignKey("Proxy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CQRS.Domain.Entities.AccountTypeEntity", "AccountType")
                        .WithMany("AccountType_Accounts")
                        .HasForeignKey("UserType");

                    b.Navigation("AccountType");

                    b.Navigation("Account_Proxy");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowserEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "AccountsInBrowser_Account")
                        .WithMany("Account_AccountsInBrowser")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.BrowserEntity", "AccountsInBrowser_Browser")
                        .WithMany("Browser_AccountsInBrowser")
                        .HasForeignKey("BrowserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInBrowser_Account");

                    b.Navigation("AccountsInBrowser_Browser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProjectEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "AccountsInProject_Account")
                        .WithMany("Account_AccountsInProject")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ProjectEntity", "AccountsInProject_Project")
                        .WithMany("AccountsInProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInProject_Account");

                    b.Navigation("AccountsInProject_Project");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.LogsEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "Logs_Account")
                        .WithMany("Logs")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlansInScheduleEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.DevicesEntity", "PlansInSchedule_Device")
                        .WithMany("PlansInSchedules")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.PlanEntity", "PlansInSchedule_Plan")
                        .WithMany("PlansInSchedule")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ScheduleEntity", "PlansInSchedule_Schedule")
                        .WithMany("PlansInSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlansInSchedule_Device");

                    b.Navigation("PlansInSchedule_Plan");

                    b.Navigation("PlansInSchedule_Schedule");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlanEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.PlanEntity", "ScriptsInPlan_Plan")
                        .WithMany("ScriptsInPlans")
                        .HasForeignKey("ScriptsInPlan_PlanId");

                    b.HasOne("CQRS.Domain.Entities.ScriptEntity", "ScriptsInPlan_Script")
                        .WithMany()
                        .HasForeignKey("ScriptsInPlan_ScriptId");

                    b.Navigation("ScriptsInPlan_Plan");

                    b.Navigation("ScriptsInPlan_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProjectEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.ProjectEntity", "ScriptsInProject_Project")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ScriptEntity", "ScriptsInProject_Script")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScriptsInProject_Project");

                    b.Navigation("ScriptsInProject_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.Navigation("Account_AccountsInBrowser");

                    b.Navigation("Account_AccountsInProject");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountTypeEntity", b =>
                {
                    b.Navigation("AccountType_Accounts");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.BrowserEntity", b =>
                {
                    b.Navigation("Browser_AccountsInBrowser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.DevicesEntity", b =>
                {
                    b.Navigation("PlansInSchedules");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlanEntity", b =>
                {
                    b.Navigation("PlansInSchedule");

                    b.Navigation("ScriptsInPlans");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProjectEntity", b =>
                {
                    b.Navigation("AccountsInProject");

                    b.Navigation("ScriptsInProjects");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProxyEntity", b =>
                {
                    b.Navigation("Proxy_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Navigation("PlansInSchedules");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptEntity", b =>
                {
                    b.Navigation("ScriptsInProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
