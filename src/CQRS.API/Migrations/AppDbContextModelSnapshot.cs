// <auto-generated />
using System;
using CQRS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQRS.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Proxy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Proxy");

                    b.HasIndex("UserType");

                    b.ToTable("AccountTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("497ed262-5451-4157-a72b-cd04ac0d0c09"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1729),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("d69faa9f-a081-457d-9f12-1e69bb2497e1"),
                            UserName = "User1",
                            UserType = new Guid("3e1ba1dc-4331-4412-b749-92cfb7717e7a")
                        },
                        new
                        {
                            Id = new Guid("d13c4377-31fb-4c77-aafd-2e197dcd0ab0"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1733),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("d69faa9f-a081-457d-9f12-1e69bb2497e1"),
                            UserName = "User2",
                            UserType = new Guid("25b46b15-94a9-4a54-8302-f2a4af9a4c13")
                        },
                        new
                        {
                            Id = new Guid("f5582f31-a28e-4b17-9dd5-f4edbb69451d"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1735),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            UserName = "User3",
                            UserType = new Guid("25b46b15-94a9-4a54-8302-f2a4af9a4c13")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountTypeTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e1ba1dc-4331-4412-b749-92cfb7717e7a"),
                            IsDelete = false,
                            IsMigration = true,
                            TypeName = 0
                        },
                        new
                        {
                            Id = new Guid("25b46b15-94a9-4a54-8302-f2a4af9a4c13"),
                            IsDelete = false,
                            IsMigration = true,
                            TypeName = 1
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowserEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrowserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "BrowserId");

                    b.HasIndex("BrowserId");

                    b.ToTable("AccountsInBrowserTable");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("497ed262-5451-4157-a72b-cd04ac0d0c09"),
                            BrowserId = new Guid("5cf109ee-6071-42ef-ae0f-1972c411ad7a"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            AccountId = new Guid("d13c4377-31fb-4c77-aafd-2e197dcd0ab0"),
                            BrowserId = new Guid("376f7d25-23c9-484c-8178-5d24b690edcd"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProjectEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AccountsInProjectTable");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("497ed262-5451-4157-a72b-cd04ac0d0c09"),
                            ProjectId = new Guid("1bdf7d56-7c5c-4c66-946a-6333e58f380d"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            AccountId = new Guid("d13c4377-31fb-4c77-aafd-2e197dcd0ab0"),
                            ProjectId = new Guid("d631c471-80c5-4785-97fd-402b8bb651a6"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.BrowserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("HightScreen")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Scale")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WithScreeen")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("XPosition")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("YPosition")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("BrowserTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cf109ee-6071-42ef-ae0f-1972c411ad7a"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1805),
                            HightScreen = 600m,
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = false,
                            Name = "Name1",
                            Path = "Path",
                            Scale = 50m,
                            UserAgent = "",
                            WithScreeen = 400m,
                            XPosition = 160m,
                            YPosition = 50m
                        },
                        new
                        {
                            Id = new Guid("376f7d25-23c9-484c-8178-5d24b690edcd"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1814),
                            HightScreen = 600m,
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = false,
                            Name = "Name2",
                            Path = "Path",
                            Scale = 50m,
                            UserAgent = "",
                            WithScreeen = 400m,
                            XPosition = 160m,
                            YPosition = 50m
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.DevicesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DevicesTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5facf2fb-1859-4dae-b14e-65d070b4b921"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(2073),
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("ff64a691-885c-4d27-936c-cb0cae4b32ae"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(2074),
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Name = "Name1"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.HistoryOrderTradingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<string>("FillAndOrderPrice_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FillAndOrderPrice_Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndOrderValue_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Prefix_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Prefix_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Suffix_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Suffix_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsResovlve")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol_Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HistoryOrderTradingTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e0c85f5-4608-44e6-9dbc-3d8ff0a288d2"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = 0,
                            OrderTime = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(2132),
                            Side = "BUY",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        },
                        new
                        {
                            Id = new Guid("dc551311-3ad2-4ed4-a443-38aba6fd6be7"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = 0,
                            OrderTime = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(2139),
                            Side = "SELL",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        },
                        new
                        {
                            Id = new Guid("184ead55-0b79-4697-a667-4613409c7607"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            IsResovlve = 0,
                            OrderTime = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(2142),
                            Side = "SELL",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.LogsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.ToTable("LogsTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08a2c973-eb8c-40fa-b7ec-6cf5e05a16f6"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1766),
                            IsDelete = false,
                            IsMigration = true,
                            Message = "Message",
                            User = new Guid("497ed262-5451-4157-a72b-cd04ac0d0c09")
                        },
                        new
                        {
                            Id = new Guid("47ea70b3-74aa-437b-893f-b5162e9ba710"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1768),
                            IsDelete = false,
                            IsMigration = true,
                            Message = "Message",
                            User = new Guid("d13c4377-31fb-4c77-aafd-2e197dcd0ab0")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e145c218-9d0b-4204-89a6-45e0f3c0d1da"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1999),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Plan 1"
                        },
                        new
                        {
                            Id = new Guid("b0d89e34-cdae-4ac3-96c2-2083fbea3dcd"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(2001),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Plan 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlansInScheduleEntity", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("ScheduleId", "DeviceId", "PlanId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlansInScheduleTable");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("38a9e64c-8d6f-4618-bf91-1539a5dab06a"),
                            DeviceId = new Guid("5facf2fb-1859-4dae-b14e-65d070b4b921"),
                            PlanId = new Guid("e145c218-9d0b-4204-89a6-45e0f3c0d1da"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            ScheduleId = new Guid("2318f928-098d-4296-a5cb-22f4f4fd49c4"),
                            DeviceId = new Guid("ff64a691-885c-4d27-936c-cb0cae4b32ae"),
                            PlanId = new Guid("b0d89e34-cdae-4ac3-96c2-2083fbea3dcd"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsTable");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProjectTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bdf7d56-7c5c-4c66-946a-6333e58f380d"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1881),
                            EndDate = new DateTime(2024, 12, 8, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1876),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Project1",
                            StartDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1875)
                        },
                        new
                        {
                            Id = new Guid("d631c471-80c5-4785-97fd-402b8bb651a6"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1885),
                            EndDate = new DateTime(2024, 12, 8, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1884),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Project2",
                            StartDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1884)
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProxyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CheckLiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProxyTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d69faa9f-a081-457d-9f12-1e69bb2497e1"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1426),
                            Ip = "192.168.1.6",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass1",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser1"
                        },
                        new
                        {
                            Id = new Guid("fa1322fb-e3fa-41ea-a200-3480ef3c460f"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1440),
                            Ip = "192.168.1.7",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass2",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser2"
                        },
                        new
                        {
                            Id = new Guid("d79de5dd-56a1-465a-b123-b39b989c26d3"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1443),
                            Ip = "192.168.1.8",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass2",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("IsRun")
                        .HasColumnType("int");

                    b.Property<int>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38a9e64c-8d6f-4618-bf91-1539a5dab06a"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(2047),
                            DateTimeStart = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(2046),
                            IsDelete = false,
                            IsMigration = true,
                            IsRun = 0,
                            IsStatus = 0,
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("2318f928-098d-4296-a5cb-22f4f4fd49c4"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(2049),
                            DateTimeStart = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(2049),
                            IsDelete = false,
                            IsMigration = true,
                            IsRun = 0,
                            IsStatus = 0,
                            Name = "Name1"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScriptTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f33917d8-ed83-4fdb-b67c-0652b33c4692"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1940),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Script 1"
                        },
                        new
                        {
                            Id = new Guid("53f89d61-fe23-489c-9348-dfa15219b9c8"),
                            CreateDate = new DateTime(2024, 12, 3, 19, 36, 16, 414, DateTimeKind.Local).AddTicks(1941),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Script 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlanEntity", b =>
                {
                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ScriptsInPlan_PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScriptsInPlan_ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanId", "ScriptId");

                    b.HasIndex("ScriptsInPlan_PlanId");

                    b.HasIndex("ScriptsInPlan_ScriptId");

                    b.ToTable("ScriptsInPlanTable");

                    b.HasData(
                        new
                        {
                            PlanId = new Guid("e145c218-9d0b-4204-89a6-45e0f3c0d1da"),
                            ScriptId = new Guid("f33917d8-ed83-4fdb-b67c-0652b33c4692"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            PlanId = new Guid("b0d89e34-cdae-4ac3-96c2-2083fbea3dcd"),
                            ScriptId = new Guid("53f89d61-fe23-489c-9348-dfa15219b9c8"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProjectEntity", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "ScriptId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptsInProjectTable");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("1bdf7d56-7c5c-4c66-946a-6333e58f380d"),
                            ScriptId = new Guid("f33917d8-ed83-4fdb-b67c-0652b33c4692"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            ProjectId = new Guid("d631c471-80c5-4785-97fd-402b8bb651a6"),
                            ScriptId = new Guid("53f89d61-fe23-489c-9348-dfa15219b9c8"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.ProxyEntity", "Account_Proxy")
                        .WithMany("Proxy_Account")
                        .HasForeignKey("Proxy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CQRS.Domain.Entities.AccountTypeEntity", "AccountType")
                        .WithMany("AccountType_Accounts")
                        .HasForeignKey("UserType");

                    b.Navigation("AccountType");

                    b.Navigation("Account_Proxy");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowserEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "AccountsInBrowser_Account")
                        .WithMany("Account_AccountsInBrowser")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.BrowserEntity", "AccountsInBrowser_Browser")
                        .WithMany("Browser_AccountsInBrowser")
                        .HasForeignKey("BrowserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInBrowser_Account");

                    b.Navigation("AccountsInBrowser_Browser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProjectEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "AccountsInProject_Account")
                        .WithMany("Account_AccountsInProject")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ProjectEntity", "AccountsInProject_Project")
                        .WithMany("AccountsInProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInProject_Account");

                    b.Navigation("AccountsInProject_Project");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.LogsEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "Logs_Account")
                        .WithMany("Logs")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlansInScheduleEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.DevicesEntity", "PlansInSchedule_Device")
                        .WithMany("PlansInSchedules")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.PlanEntity", "PlansInSchedule_Plan")
                        .WithMany("PlansInSchedule")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ScheduleEntity", "PlansInSchedule_Schedule")
                        .WithMany("PlansInSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlansInSchedule_Device");

                    b.Navigation("PlansInSchedule_Plan");

                    b.Navigation("PlansInSchedule_Schedule");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlanEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.PlanEntity", "ScriptsInPlan_Plan")
                        .WithMany("ScriptsInPlans")
                        .HasForeignKey("ScriptsInPlan_PlanId");

                    b.HasOne("CQRS.Domain.Entities.ScriptEntity", "ScriptsInPlan_Script")
                        .WithMany()
                        .HasForeignKey("ScriptsInPlan_ScriptId");

                    b.Navigation("ScriptsInPlan_Plan");

                    b.Navigation("ScriptsInPlan_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProjectEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.ProjectEntity", "ScriptsInProject_Project")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ScriptEntity", "ScriptsInProject_Script")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScriptsInProject_Project");

                    b.Navigation("ScriptsInProject_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.Navigation("Account_AccountsInBrowser");

                    b.Navigation("Account_AccountsInProject");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountTypeEntity", b =>
                {
                    b.Navigation("AccountType_Accounts");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.BrowserEntity", b =>
                {
                    b.Navigation("Browser_AccountsInBrowser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.DevicesEntity", b =>
                {
                    b.Navigation("PlansInSchedules");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlanEntity", b =>
                {
                    b.Navigation("PlansInSchedule");

                    b.Navigation("ScriptsInPlans");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProjectEntity", b =>
                {
                    b.Navigation("AccountsInProject");

                    b.Navigation("ScriptsInProjects");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProxyEntity", b =>
                {
                    b.Navigation("Proxy_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Navigation("PlansInSchedules");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptEntity", b =>
                {
                    b.Navigation("ScriptsInProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
