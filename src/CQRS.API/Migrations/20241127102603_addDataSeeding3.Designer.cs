// <auto-generated />
using System;
using CQRS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQRS.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241127102603_addDataSeeding3")]
    partial class addDataSeeding3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Proxy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Proxy");

                    b.HasIndex("UserType");

                    b.ToTable("AccountTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96d13728-e614-4ebf-8998-346071c72210"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1300),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("8e325b78-2e18-4391-81ac-8e7ff99f7f6b"),
                            UserName = "User1",
                            UserType = new Guid("7dfe96bd-df00-4dc7-b407-ff4d22d5014a")
                        },
                        new
                        {
                            Id = new Guid("18980103-b86b-4e55-a42a-ee33c0137161"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1304),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            Proxy = new Guid("8e325b78-2e18-4391-81ac-8e7ff99f7f6b"),
                            UserName = "User2",
                            UserType = new Guid("1a3631fd-4671-4bd2-bf58-25e5fd09bc48")
                        },
                        new
                        {
                            Id = new Guid("1f4ccd47-8637-4f2e-819c-13767083a25d"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1306),
                            Email = "User@example.com",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = true,
                            Password = "UserPass",
                            UserName = "User3",
                            UserType = new Guid("1a3631fd-4671-4bd2-bf58-25e5fd09bc48")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountTypeTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7dfe96bd-df00-4dc7-b407-ff4d22d5014a"),
                            IsDelete = false,
                            IsMigration = true,
                            TypeName = 0
                        },
                        new
                        {
                            Id = new Guid("1a3631fd-4671-4bd2-bf58-25e5fd09bc48"),
                            IsDelete = false,
                            IsMigration = true,
                            TypeName = 1
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowserEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrowserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "BrowserId");

                    b.HasIndex("BrowserId");

                    b.ToTable("AccountsInBrowserTable");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("96d13728-e614-4ebf-8998-346071c72210"),
                            BrowserId = new Guid("cb67427b-1487-4065-9fd1-63f68cc11dec"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            AccountId = new Guid("18980103-b86b-4e55-a42a-ee33c0137161"),
                            BrowserId = new Guid("1f1567b7-16d2-46f8-8d54-fea949356acd"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProjectEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("AccountId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AccountsInProjectTable");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("96d13728-e614-4ebf-8998-346071c72210"),
                            ProjectId = new Guid("874c2b98-e792-4ff2-93bd-54c4684c5ad5"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            AccountId = new Guid("18980103-b86b-4e55-a42a-ee33c0137161"),
                            ProjectId = new Guid("3da46593-bf64-408d-ab5f-852efbd7da3d"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.BrowserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("HightScreen")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Scale")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WithScreeen")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("XPosition")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("YPosition")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("BrowserTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb67427b-1487-4065-9fd1-63f68cc11dec"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1372),
                            HightScreen = 600m,
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = false,
                            Name = "Name1",
                            Path = "Path",
                            Scale = 50m,
                            UserAgent = "",
                            WithScreeen = 400m,
                            XPosition = 160m,
                            YPosition = 50m
                        },
                        new
                        {
                            Id = new Guid("1f1567b7-16d2-46f8-8d54-fea949356acd"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1382),
                            HightScreen = 600m,
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = false,
                            Name = "Name2",
                            Path = "Path",
                            Scale = 50m,
                            UserAgent = "",
                            WithScreeen = 400m,
                            XPosition = 160m,
                            YPosition = 50m
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.DevicesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DevicesTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("526fbf26-3443-4d07-8fa0-f4af6e6dc8e7"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1626),
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("537ba68b-731c-49fe-b45d-279f29f9e5c2"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1627),
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Name = "Name1"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.HistoryOrderTradingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<string>("FillAndOrderPrice_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FillAndOrderPrice_Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndOrderValue_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Prefix_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Prefix_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Suffix_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilledAndTotal_Suffix_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol_Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HistoryOrderTradingTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bdfcec71-6d9a-47f9-af79-3fa416d49693"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            OrderTime = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1678),
                            Side = "BUY",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        },
                        new
                        {
                            Id = new Guid("4d7dfc97-274f-4111-8aa0-3c2424f0e1dc"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            OrderTime = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1686),
                            Side = "SELL",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        },
                        new
                        {
                            Id = new Guid("46c56e5f-121d-4beb-bd6b-fad583a8d3a5"),
                            Fee = 0.080000000000000002,
                            FillAndOrderPrice_Prefix = "0.381",
                            FillAndOrderPrice_Suffix = "0.381",
                            FilledAndOrderValue_Prefix = "15.25",
                            FilledAndTotal_Prefix_Symbol = "DOGE",
                            FilledAndTotal_Prefix_Value = "40",
                            FilledAndTotal_Suffix_Symbol = "DOGE",
                            FilledAndTotal_Suffix_Value = "40",
                            OrderTime = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1689),
                            Side = "SELL",
                            Symbol_Prefix = "DOGE",
                            Symbol_Suffix = "USDT"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.LogsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.ToTable("LogsTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70b96037-2150-429e-8a4e-eb4f3e168ba8"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1338),
                            IsDelete = false,
                            IsMigration = true,
                            Message = "Message",
                            User = new Guid("96d13728-e614-4ebf-8998-346071c72210")
                        },
                        new
                        {
                            Id = new Guid("1dc7a428-c0b1-42e4-875a-b2bff16ea2d7"),
                            Code = 200,
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1342),
                            IsDelete = false,
                            IsMigration = true,
                            Message = "Message",
                            User = new Guid("18980103-b86b-4e55-a42a-ee33c0137161")
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdee3a5b-fe7f-4f27-9d2c-16d1649ac9e3"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1553),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Plan 1"
                        },
                        new
                        {
                            Id = new Guid("b6e2fd35-d3ca-46e4-9b1e-ee07a80560fe"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1554),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Plan 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlansInScheduleEntity", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("ScheduleId", "DeviceId", "PlanId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlansInScheduleTable");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("67d73aa0-759c-4a29-8ba4-1d22ec9957dd"),
                            DeviceId = new Guid("526fbf26-3443-4d07-8fa0-f4af6e6dc8e7"),
                            PlanId = new Guid("fdee3a5b-fe7f-4f27-9d2c-16d1649ac9e3"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            ScheduleId = new Guid("dc3165b9-2c87-4344-adb4-6efa8b0cec04"),
                            DeviceId = new Guid("537ba68b-731c-49fe-b45d-279f29f9e5c2"),
                            PlanId = new Guid("b6e2fd35-d3ca-46e4-9b1e-ee07a80560fe"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsTable");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProjectTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("874c2b98-e792-4ff2-93bd-54c4684c5ad5"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1443),
                            EndDate = new DateTime(2024, 12, 2, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1438),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Project1",
                            StartDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1437)
                        },
                        new
                        {
                            Id = new Guid("3da46593-bf64-408d-ab5f-852efbd7da3d"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1446),
                            EndDate = new DateTime(2024, 12, 2, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1445),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Project2",
                            StartDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1445)
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProxyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CheckLiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProxyTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e325b78-2e18-4391-81ac-8e7ff99f7f6b"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1010),
                            Ip = "192.168.1.6",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass1",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser1"
                        },
                        new
                        {
                            Id = new Guid("c78cc8ca-2356-4209-a871-3001191ee00e"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1023),
                            Ip = "192.168.1.7",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass2",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser2"
                        },
                        new
                        {
                            Id = new Guid("82f052cc-256f-473b-9f9d-9fb3a78c2732"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1025),
                            Ip = "192.168.1.8",
                            IsDelete = false,
                            IsMigration = true,
                            IsStatus = 0,
                            Password = "proxyPass2",
                            Port = 8080,
                            Type = 0,
                            User = "proxyUser2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<int>("IsRun")
                        .HasColumnType("int");

                    b.Property<int>("IsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67d73aa0-759c-4a29-8ba4-1d22ec9957dd"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1600),
                            DateTimeStart = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1598),
                            IsDelete = false,
                            IsMigration = true,
                            IsRun = 0,
                            IsStatus = 0,
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("dc3165b9-2c87-4344-adb4-6efa8b0cec04"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1602),
                            DateTimeStart = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1602),
                            IsDelete = false,
                            IsMigration = true,
                            IsRun = 0,
                            IsStatus = 0,
                            Name = "Name1"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScriptTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d60b3154-6cb9-4a36-bf05-d0c833252b98"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1497),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Script 1"
                        },
                        new
                        {
                            Id = new Guid("f0ac1b38-be3f-41ac-a5a0-f40a7129b88c"),
                            CreateDate = new DateTime(2024, 11, 27, 17, 26, 2, 402, DateTimeKind.Local).AddTicks(1499),
                            IsDelete = false,
                            IsMigration = true,
                            Name = "Script 2"
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlanEntity", b =>
                {
                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ScriptsInPlan_PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScriptsInPlan_ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanId", "ScriptId");

                    b.HasIndex("ScriptsInPlan_PlanId");

                    b.HasIndex("ScriptsInPlan_ScriptId");

                    b.ToTable("ScriptsInPlanTable");

                    b.HasData(
                        new
                        {
                            PlanId = new Guid("fdee3a5b-fe7f-4f27-9d2c-16d1649ac9e3"),
                            ScriptId = new Guid("d60b3154-6cb9-4a36-bf05-d0c833252b98"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            PlanId = new Guid("b6e2fd35-d3ca-46e4-9b1e-ee07a80560fe"),
                            ScriptId = new Guid("f0ac1b38-be3f-41ac-a5a0-f40a7129b88c"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProjectEntity", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMigration")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "ScriptId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptsInProjectTable");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("874c2b98-e792-4ff2-93bd-54c4684c5ad5"),
                            ScriptId = new Guid("d60b3154-6cb9-4a36-bf05-d0c833252b98"),
                            IsDelete = false,
                            IsMigration = true
                        },
                        new
                        {
                            ProjectId = new Guid("3da46593-bf64-408d-ab5f-852efbd7da3d"),
                            ScriptId = new Guid("f0ac1b38-be3f-41ac-a5a0-f40a7129b88c"),
                            IsDelete = false,
                            IsMigration = true
                        });
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.ProxyEntity", "Account_Proxy")
                        .WithMany("Proxy_Account")
                        .HasForeignKey("Proxy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CQRS.Domain.Entities.AccountTypeEntity", "AccountType")
                        .WithMany("AccountType_Accounts")
                        .HasForeignKey("UserType");

                    b.Navigation("AccountType");

                    b.Navigation("Account_Proxy");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInBrowserEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "AccountsInBrowser_Account")
                        .WithMany("Account_AccountsInBrowser")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.BrowserEntity", "AccountsInBrowser_Browser")
                        .WithMany("Browser_AccountsInBrowser")
                        .HasForeignKey("BrowserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInBrowser_Account");

                    b.Navigation("AccountsInBrowser_Browser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountsInProjectEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "AccountsInProject_Account")
                        .WithMany("Account_AccountsInProject")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ProjectEntity", "AccountsInProject_Project")
                        .WithMany("AccountsInProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInProject_Account");

                    b.Navigation("AccountsInProject_Project");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.LogsEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.AccountEntity", "Logs_Account")
                        .WithMany("Logs")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logs_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlansInScheduleEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.DevicesEntity", "PlansInSchedule_Device")
                        .WithMany("PlansInSchedules")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.PlanEntity", "PlansInSchedule_Plan")
                        .WithMany("PlansInSchedule")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ScheduleEntity", "PlansInSchedule_Schedule")
                        .WithMany("PlansInSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlansInSchedule_Device");

                    b.Navigation("PlansInSchedule_Plan");

                    b.Navigation("PlansInSchedule_Schedule");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInPlanEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.PlanEntity", "ScriptsInPlan_Plan")
                        .WithMany("ScriptsInPlans")
                        .HasForeignKey("ScriptsInPlan_PlanId");

                    b.HasOne("CQRS.Domain.Entities.ScriptEntity", "ScriptsInPlan_Script")
                        .WithMany()
                        .HasForeignKey("ScriptsInPlan_ScriptId");

                    b.Navigation("ScriptsInPlan_Plan");

                    b.Navigation("ScriptsInPlan_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptsInProjectEntity", b =>
                {
                    b.HasOne("CQRS.Domain.Entities.ProjectEntity", "ScriptsInProject_Project")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQRS.Domain.Entities.ScriptEntity", "ScriptsInProject_Script")
                        .WithMany("ScriptsInProjects")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScriptsInProject_Project");

                    b.Navigation("ScriptsInProject_Script");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountEntity", b =>
                {
                    b.Navigation("Account_AccountsInBrowser");

                    b.Navigation("Account_AccountsInProject");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.AccountTypeEntity", b =>
                {
                    b.Navigation("AccountType_Accounts");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.BrowserEntity", b =>
                {
                    b.Navigation("Browser_AccountsInBrowser");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.DevicesEntity", b =>
                {
                    b.Navigation("PlansInSchedules");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.PlanEntity", b =>
                {
                    b.Navigation("PlansInSchedule");

                    b.Navigation("ScriptsInPlans");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProjectEntity", b =>
                {
                    b.Navigation("AccountsInProject");

                    b.Navigation("ScriptsInProjects");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ProxyEntity", b =>
                {
                    b.Navigation("Proxy_Account");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Navigation("PlansInSchedules");
                });

            modelBuilder.Entity("CQRS.Domain.Entities.ScriptEntity", b =>
                {
                    b.Navigation("ScriptsInProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
